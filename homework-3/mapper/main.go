package main

import (
	"context"
	"encoding/json"
	"log"
	"os"
	"strings"
	"time"

	"github.com/segmentio/kafka-go"
)

// –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥–∞ (–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ producer)
type LogMessage struct {
	Timestamp string `json:"timestamp"`
	Level     string `json:"level"`
	Service   string `json:"service"`
	Message   string `json:"message"`
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è ERROR –ª–æ–≥–æ–≤
type ErrorLog struct {
	Timestamp string `json:"timestamp"`
	Service   string `json:"service"`
	Error     string `json:"error"`
	ProcessedAt string `json:"processed_at"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	servers := getEnvOrDefault("KAFKA_BOOTSTRAP_SERVERS", "localhost:19092")
	inputTopic := getEnvOrDefault("INPUT_TOPIC", "application-logs")
	outputTopic := getEnvOrDefault("OUTPUT_TOPIC", "error-logs")
	consumerGroup := getEnvOrDefault("CONSUMER_GROUP", "error-mapper")

	log.Printf("üîÑ Mapper –∑–∞–ø—É—â–µ–Ω")
	log.Printf("üì• –ß–∏—Ç–∞–µ–º –∏–∑: %s", inputTopic)
	log.Printf("üì§ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤: %s", outputTopic)

	brokers := strings.Split(servers, ",")

	// –°–æ–∑–¥–∞–µ–º reader –¥–ª—è —á—Ç–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –ª–æ–≥–æ–≤
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: brokers,
		Topic:   inputTopic,
		GroupID: consumerGroup,
		MinBytes: 10e3, // 10KB
		MaxBytes: 10e6, // 10MB
	})
	defer reader.Close()

	// –°–æ–∑–¥–∞–µ–º writer –¥–ª—è –∑–∞–ø–∏—Å–∏ ERROR –ª–æ–≥–æ–≤  
	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers: brokers,
		Topic:   outputTopic,
		Balancer: &kafka.LeastBytes{},
	})
	defer writer.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		message, err := reader.ReadMessage(context.Background())
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
			continue
		}

		// –ü–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –ª–æ–≥
		var logMsg LogMessage
		err = json.Unmarshal(message.Value, &logMsg)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ JSON: %v", err)
			continue
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ERROR –ª–æ–≥–∏
		if logMsg.Level != "ERROR" {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-ERROR –ª–æ–≥–∏
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		errorLog := ErrorLog{
			Timestamp:   logMsg.Timestamp,
			Service:     logMsg.Service,
			Error:       logMsg.Message,
			ProcessedAt: time.Now().Format("2006-01-02 15:04:05"),
		}

		// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
		errorBytes, err := json.Marshal(errorLog)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
			continue
		}

		// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ç–æ–ø–∏–∫
		err = writer.WriteMessages(context.Background(), kafka.Message{
			Key:   []byte(errorLog.Service), // –ö–ª—é—á –ø–æ —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
			Value: errorBytes,
		})

		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
		} else {
			log.Printf("üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω ERROR: %s - %s", errorLog.Service, errorLog.Error)
		}
	}
}

func getEnvOrDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
} 