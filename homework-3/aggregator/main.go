package main

import (
	"context"
	"encoding/json"
	"log"
	"os"
	"strings"
	"time"

	"github.com/segmentio/kafka-go"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ERROR –ª–æ–≥–∞ (–∏–∑ mapper)
type ErrorLog struct {
	Timestamp   string `json:"timestamp"`
	Service     string `json:"service"`
	Error       string `json:"error"`
	ProcessedAt string `json:"processed_at"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
type ErrorStats struct {
	WindowStart string            `json:"window_start"`
	WindowEnd   string            `json:"window_end"`
	Services    map[string]int    `json:"services"`
	TotalErrors int               `json:"total_errors"`
	GeneratedAt string            `json:"generated_at"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	servers := getEnvOrDefault("KAFKA_BOOTSTRAP_SERVERS", "localhost:19092")
	inputTopic := getEnvOrDefault("INPUT_TOPIC", "error-logs")
	outputTopic := getEnvOrDefault("OUTPUT_TOPIC", "error-stats")
	consumerGroup := getEnvOrDefault("CONSUMER_GROUP", "error-aggregator")
	windowSeconds := 60 // 1-–º–∏–Ω—É—Ç–Ω—ã–µ –æ–∫–Ω–∞

	log.Printf("üìä Aggregator –∑–∞–ø—É—â–µ–Ω")
	log.Printf("üì• –ß–∏—Ç–∞–µ–º –∏–∑: %s", inputTopic)
	log.Printf("üì§ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤: %s", outputTopic)
	log.Printf("‚è∞ –û–∫–Ω–æ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %d —Å–µ–∫—É–Ω–¥", windowSeconds)

	brokers := strings.Split(servers, ",")

	// –°–æ–∑–¥–∞–µ–º reader –¥–ª—è —á—Ç–µ–Ω–∏—è ERROR –ª–æ–≥–æ–≤
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: brokers,
		Topic:   inputTopic,
		GroupID: consumerGroup,
		MinBytes: 10e3, // 10KB
		MaxBytes: 10e6, // 10MB
	})
	defer reader.Close()

	// –°–æ–∑–¥–∞–µ–º writer –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers: brokers,
		Topic:   outputTopic,
		Balancer: &kafka.LeastBytes{},
	})
	defer writer.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	errorCounts := make(map[string]int)
	windowStart := time.Now()

	// Ticker –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	ticker := time.NewTicker(time.Duration(windowSeconds) * time.Second)
	defer ticker.Stop()

	// –ö–∞–Ω–∞–ª –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	messageChan := make(chan kafka.Message, 100)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		for {
			message, err := reader.ReadMessage(context.Background())
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
				continue
			}
			messageChan <- message
		}
	}()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	for {
		select {
		case message := <-messageChan:
			// –ü–∞—Ä—Å–∏–º ERROR –ª–æ–≥
			var errorLog ErrorLog
			err := json.Unmarshal(message.Value, &errorLog)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ JSON: %v", err)
				continue
			}

			// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
			errorCounts[errorLog.Service]++
			log.Printf("üìà %s: %d –æ—à–∏–±–æ–∫", errorLog.Service, errorCounts[errorLog.Service])

		case <-ticker.C:
			// –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			if len(errorCounts) > 0 {
				windowEnd := time.Now()
				totalErrors := 0
				for _, count := range errorCounts {
					totalErrors += count
				}

				stats := ErrorStats{
					WindowStart: windowStart.Format("2006-01-02 15:04:05"),
					WindowEnd:   windowEnd.Format("2006-01-02 15:04:05"),
					Services:    copyMap(errorCounts),
					TotalErrors: totalErrors,
					GeneratedAt: time.Now().Format("2006-01-02 15:04:05"),
				}

				// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				statsBytes, err := json.Marshal(stats)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
					continue
				}

				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				err = writer.WriteMessages(context.Background(), kafka.Message{
					Key:   []byte("error-stats"),
					Value: statsBytes,
				})

				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
				} else {
					log.Printf("üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %d –æ—à–∏–±–æ–∫ –∑–∞ –æ–∫–Ω–æ", totalErrors)
					for service, count := range errorCounts {
						log.Printf("   %s: %d –æ—à–∏–±–æ–∫", service, count)
					}
				}

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
				errorCounts = make(map[string]int)
				windowStart = windowEnd
			}
		}
	}
}

func copyMap(original map[string]int) map[string]int {
	copy := make(map[string]int)
	for k, v := range original {
		copy[k] = v
	}
	return copy
}

func getEnvOrDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
} 