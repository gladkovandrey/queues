package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/segmentio/kafka-go"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ (–∏–∑ aggregator)
type ErrorStats struct {
	WindowStart string         `json:"window_start"`
	WindowEnd   string         `json:"window_end"`
	Services    map[string]int `json:"services"`
	TotalErrors int            `json:"total_errors"`
	GeneratedAt string         `json:"generated_at"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	servers := getEnvOrDefault("KAFKA_BOOTSTRAP_SERVERS", "localhost:19092")
	topic := getEnvOrDefault("KAFKA_TOPIC", "error-stats")
	consumerGroup := getEnvOrDefault("CONSUMER_GROUP", "stats-display")

	log.Printf("üìä Stats Consumer –∑–∞–ø—É—â–µ–Ω")
	log.Printf("üì• –ß–∏—Ç–∞–µ–º –∏–∑: %s", topic)

	brokers := strings.Split(servers, ",")

	// –°–æ–∑–¥–∞–µ–º reader –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers: brokers,
		Topic:   topic,
		GroupID: consumerGroup,
		MinBytes: 10e3,
		MaxBytes: 10e6,
	})
	defer reader.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	log.Printf("\nüîç –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫...\n")

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	for {
		message, err := reader.ReadMessage(context.Background())
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		var stats ErrorStats
		err = json.Unmarshal(message.Value, &stats)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ JSON: %v", err)
			continue
		}

		// –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		displayStats(&stats)
	}
}

func displayStats(stats *ErrorStats) {
	fmt.Printf("\n" + strings.Repeat("=", 70) + "\n")
	fmt.Printf("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö –ó–ê –ü–ï–†–ò–û–î\n")
	fmt.Printf("üïê –ü–µ—Ä–∏–æ–¥: %s ‚Üí %s\n", stats.WindowStart, stats.WindowEnd)
	fmt.Printf("üìà –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: %d\n", stats.TotalErrors)
	fmt.Printf("‚è∞ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: %s\n", stats.GeneratedAt)
	fmt.Printf(strings.Repeat("-", 70) + "\n")

	if len(stats.Services) == 0 {
		fmt.Printf("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
	} else {
		fmt.Printf("üîç –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:\n")
		
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫ (–ø—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
		type serviceError struct {
			name  string
			count int
		}
		
		var sorted []serviceError
		for service, count := range stats.Services {
			sorted = append(sorted, serviceError{service, count})
		}
		
		// –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
		for i := 0; i < len(sorted); i++ {
			for j := i + 1; j < len(sorted); j++ {
				if sorted[j].count > sorted[i].count {
					sorted[i], sorted[j] = sorted[j], sorted[i]
				}
			}
		}

		for i, se := range sorted {
			percentage := float64(se.count) / float64(stats.TotalErrors) * 100
			bar := generateBar(percentage)
			
			var icon string
			switch i {
			case 0:
				icon = "ü•á" // –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
			case 1:
				icon = "ü•à" // –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
			case 2:
				icon = "ü•â" // –¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
			default:
				icon = "üìå"
			}
			
			fmt.Printf("   %s %-18s: %3d –æ—à–∏–±–æ–∫ (%5.1f%%) %s\n",
				icon, se.name, se.count, percentage, bar)
		}
	}

	fmt.Printf(strings.Repeat("=", 70) + "\n\n")
}

func generateBar(percentage float64) string {
	barLength := 20
	filled := int(percentage / 100.0 * float64(barLength))
	
	bar := "["
	for i := 0; i < barLength; i++ {
		if i < filled {
			bar += "‚ñà"
		} else {
			bar += "‚ñë"
		}
	}
	bar += "]"
	
	return bar
}

func getEnvOrDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
} 