package main

import (
	"context"
	"encoding/json"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/segmentio/kafka-go"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞
type ServiceMetrics struct {
	Timestamp    string  `json:"timestamp"`
	Service      string  `json:"service"`
	CPUUsage     float64 `json:"cpu_usage"`     // –ø—Ä–æ—Ü–µ–Ω—Ç
	MemoryUsage  float64 `json:"memory_usage"`  // –ø—Ä–æ—Ü–µ–Ω—Ç
	LatencyMs    int     `json:"latency_ms"`    // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
	RequestCount int     `json:"request_count"` // –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
	GeneratedAt  string  `json:"generated_at"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	servers := getEnvOrDefault("KAFKA_BOOTSTRAP_SERVERS", "localhost:19092")
	topic := getEnvOrDefault("KAFKA_TOPIC", "service-metrics")
	intervalSeconds := 10 // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

	log.Printf("üìä Metrics Producer –∑–∞–ø—É—â–µ–Ω")
	log.Printf("üì§ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤: %s", topic)
	log.Printf("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: %d —Å–µ–∫—É–Ω–¥", intervalSeconds)

	brokers := strings.Split(servers, ",")

	// –°–æ–∑–¥–∞–µ–º writer –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫
	writer := kafka.NewWriter(kafka.WriterConfig{
		Brokers:  brokers,
		Topic:    topic,
		Balancer: &kafka.LeastBytes{},
	})
	defer writer.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	services := []string{"user-service", "order-service", "payment-service"}

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
	for {
		for _, service := range services {
			metrics := ServiceMetrics{
				Timestamp:    time.Now().Format("2006-01-02 15:04:05"),
				Service:      service,
				CPUUsage:     generateCPUUsage(service),
				MemoryUsage:  generateMemoryUsage(service),
				LatencyMs:    generateLatency(service),
				RequestCount: generateRequestCount(service),
				GeneratedAt:  time.Now().Format("2006-01-02 15:04:05"),
			}

			// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
			metricsBytes, err := json.Marshal(metrics)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", err)
				continue
			}

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
			err = writer.WriteMessages(context.Background(), kafka.Message{
				Key:   []byte(service), // –ö–ª—é—á –ø–æ —Å–µ—Ä–≤–∏—Å—É
				Value: metricsBytes,
			})

			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
			} else {
				log.Printf("üìä %s: CPU=%.1f%% MEM=%.1f%% LAT=%dms REQ=%d/s",
					service, metrics.CPUUsage, metrics.MemoryUsage,
					metrics.LatencyMs, metrics.RequestCount)
			}
		}

		time.Sleep(time.Duration(intervalSeconds) * time.Second)
	}
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CPU usage —Å —Ä–∞–∑–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
func generateCPUUsage(service string) float64 {
	base := map[string]float64{
		"user-service":    30.0,
		"order-service":   45.0,
		"payment-service": 25.0,
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º ¬±20%
	noise := (rand.Float64() - 0.5) * 40
	usage := base[service] + noise
	
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100%
	if usage < 0 {
		usage = 0
	}
	if usage > 100 {
		usage = 100
	}
	
	return usage
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Memory usage
func generateMemoryUsage(service string) float64 {
	base := map[string]float64{
		"user-service":    40.0,
		"order-service":   60.0,
		"payment-service": 35.0,
	}
	
	noise := (rand.Float64() - 0.5) * 30
	usage := base[service] + noise
	
	if usage < 0 {
		usage = 0
	}
	if usage > 100 {
		usage = 100
	}
	
	return usage
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Latency –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
func generateLatency(service string) int {
	base := map[string]int{
		"user-service":    50,
		"order-service":   120,
		"payment-service": 200,
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º ¬±50%
	noise := int((rand.Float64() - 0.5) * float64(base[service]))
	latency := base[service] + noise
	
	if latency < 1 {
		latency = 1
	}
	
	return latency
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
func generateRequestCount(service string) int {
	base := map[string]int{
		"user-service":    100,
		"order-service":   50,
		"payment-service": 30,
	}
	
	noise := int((rand.Float64() - 0.5) * float64(base[service]) * 0.8)
	count := base[service] + noise
	
	if count < 0 {
		count = 0
	}
	
	return count
}

func getEnvOrDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
} 