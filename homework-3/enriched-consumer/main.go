package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/segmentio/kafka-go"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ERROR –ª–æ–≥–∞
type ErrorLog struct {
	Timestamp   string `json:"timestamp"`
	Service     string `json:"service"`
	Error       string `json:"error"`
	ProcessedAt string `json:"processed_at"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–∏—Å–∞
type ServiceMetrics struct {
	Timestamp    string  `json:"timestamp"`
	Service      string  `json:"service"`
	CPUUsage     float64 `json:"cpu_usage"`
	MemoryUsage  float64 `json:"memory_usage"`
	LatencyMs    int     `json:"latency_ms"`
	RequestCount int     `json:"request_count"`
	GeneratedAt  string  `json:"generated_at"`
}

// –û–±–æ–≥–∞—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–∏–∑ join-processor)
type EnrichedError struct {
	ErrorLog
	Metrics    *ServiceMetrics `json:"metrics,omitempty"`
	JoinedAt   string          `json:"joined_at"`
	MetricsAge string          `json:"metrics_age,omitempty"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	servers := getEnvOrDefault("KAFKA_BOOTSTRAP_SERVERS", "localhost:19092")
	topic := getEnvOrDefault("KAFKA_TOPIC", "enriched-errors")
	consumerGroup := getEnvOrDefault("CONSUMER_GROUP", "enriched-display")

	log.Printf("üîó Enriched Consumer –∑–∞–ø—É—â–µ–Ω")
	log.Printf("üì• –ß–∏—Ç–∞–µ–º –∏–∑: %s", topic)

	brokers := strings.Split(servers, ",")

	// –°–æ–∑–¥–∞–µ–º reader –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers:  brokers,
		Topic:    topic,
		GroupID:  consumerGroup,
		MinBytes: 10e3,
		MaxBytes: 10e6,
	})
	defer reader.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	log.Printf("\nüîç –û–∂–∏–¥–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏...\n")

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
	for {
		message, err := reader.ReadMessage(context.Background())
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v", err)
			continue
		}

		// –ü–∞—Ä—Å–∏–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
		var enriched EnrichedError
		err = json.Unmarshal(message.Value, &enriched)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ JSON: %v", err)
			continue
		}

		// –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
		displayEnrichedError(&enriched)
	}
}

func displayEnrichedError(enriched *EnrichedError) {
	fmt.Printf("\n" + strings.Repeat("=", 70) + "\n")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
	var serviceIcon, serviceColor string
	switch enriched.Service {
	case "user-service":
		serviceIcon = "üë§"
		serviceColor = "\033[96m" // Cyan
	case "order-service":
		serviceIcon = "üì¶"
		serviceColor = "\033[93m" // Yellow
	case "payment-service":
		serviceIcon = "üí≥"
		serviceColor = "\033[95m" // Magenta
	default:
		serviceIcon = "‚öôÔ∏è"
		serviceColor = "\033[97m" // White
	}

	fmt.Printf("üö® –û–ë–û–ì–ê–©–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê\n")
	fmt.Printf("%s%s %-20s\033[0m üïê %s\n", serviceColor, serviceIcon, enriched.Service, enriched.Timestamp)
	fmt.Printf("üí• –û—à–∏–±–∫–∞: \033[91m%s\033[0m\n", enriched.Error)
	fmt.Printf("‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %s\n", enriched.ProcessedAt)
	fmt.Printf("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: %s\n", enriched.JoinedAt)

	if enriched.Metrics != nil {
		fmt.Printf(strings.Repeat("-", 70) + "\n")
		fmt.Printf("üìä –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:\n")

		// CPU –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
		cpuBar := generateMetricBar(enriched.Metrics.CPUUsage, 100)
		cpuColor := getColorByLevel(enriched.Metrics.CPUUsage, 60, 85)
		fmt.Printf("   üñ•Ô∏è  CPU:       %s%5.1f%%\033[0m %s\n", cpuColor, enriched.Metrics.CPUUsage, cpuBar)

		// Memory –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
		memBar := generateMetricBar(enriched.Metrics.MemoryUsage, 100)
		memColor := getColorByLevel(enriched.Metrics.MemoryUsage, 70, 90)
		fmt.Printf("   üß† Memory:    %s%5.1f%%\033[0m %s\n", memColor, enriched.Metrics.MemoryUsage, memBar)

		// Latency
		latencyColor := getColorByLatency(enriched.Metrics.LatencyMs)
		fmt.Printf("   ‚ö° Latency:   %s%4dms\033[0m\n", latencyColor, enriched.Metrics.LatencyMs)

		// Request count
		fmt.Printf("   üìà Requests:  %4d/sec\n", enriched.Metrics.RequestCount)
		fmt.Printf("   üìÖ –í—Ä–µ–º—è –º–µ—Ç—Ä–∏–∫: %s", enriched.Metrics.Timestamp)

		if enriched.MetricsAge != "" {
			fmt.Printf(" (–≤–æ–∑—Ä–∞—Å—Ç: %s)", enriched.MetricsAge)
		}
		fmt.Printf("\n")

		// –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
		fmt.Printf(strings.Repeat("-", 70) + "\n")
		fmt.Printf("üîç –ê–ù–ê–õ–ò–ó:\n")
		analyzeErrorContext(enriched)

	} else {
		fmt.Printf(strings.Repeat("-", 70) + "\n")
		fmt.Printf("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - JOIN –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω\n")
	}

	fmt.Printf(strings.Repeat("=", 70) + "\n\n")
}

func generateMetricBar(value, max float64) string {
	barLength := 15
	filled := int(value / max * float64(barLength))

	bar := "["
	for i := 0; i < barLength; i++ {
		if i < filled {
			bar += "‚ñà"
		} else {
			bar += "‚ñë"
		}
	}
	bar += "]"

	return bar
}

func getColorByLevel(value, yellowThreshold, redThreshold float64) string {
	if value >= redThreshold {
		return "\033[91m" // Red
	} else if value >= yellowThreshold {
		return "\033[93m" // Yellow
	}
	return "\033[92m" // Green
}

func getColorByLatency(latency int) string {
	if latency >= 150 {
		return "\033[91m" // Red
	} else if latency >= 100 {
		return "\033[93m" // Yellow
	}
	return "\033[92m" // Green
}

func analyzeErrorContext(enriched *EnrichedError) {
	if enriched.Metrics == nil {
		return
	}

	var issues []string
	var suggestions []string

	// –ê–Ω–∞–ª–∏–∑ CPU
	if enriched.Metrics.CPUUsage > 85 {
		issues = append(issues, "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
		suggestions = append(suggestions, "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
	} else if enriched.Metrics.CPUUsage > 60 {
		issues = append(issues, "‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
	}

	// –ê–Ω–∞–ª–∏–∑ Memory
	if enriched.Metrics.MemoryUsage > 90 {
		issues = append(issues, "üíæ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
		suggestions = append(suggestions, "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã")
	} else if enriched.Metrics.MemoryUsage > 70 {
		issues = append(issues, "‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
	}

	// –ê–Ω–∞–ª–∏–∑ Latency
	if enriched.Metrics.LatencyMs > 150 {
		issues = append(issues, "üêå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞")
		suggestions = append(suggestions, "   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î –∏ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º")
	} else if enriched.Metrics.LatencyMs > 100 {
		issues = append(issues, "‚ö†Ô∏è  –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞")
	}

	// –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
	if enriched.Metrics.RequestCount < 10 {
		issues = append(issues, "üìâ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é")
	}

	if len(issues) == 0 {
		fmt.Printf("   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ\n")
	} else {
		for _, issue := range issues {
			fmt.Printf("   %s\n", issue)
		}
	}

	if len(suggestions) > 0 {
		fmt.Printf("üõ†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
		for _, suggestion := range suggestions {
			fmt.Printf("%s\n", suggestion)
		}
	}
}

func getEnvOrDefault(key, defaultValue string) string {
	value := os.Getenv(key)
	if value == "" {
		return defaultValue
	}
	return value
}
