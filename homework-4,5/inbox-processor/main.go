package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/google/uuid"
	_ "github.com/lib/pq"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
)

type ReplicationMessage struct {
	EventID       uuid.UUID       `json:"event_id"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	AggregateType string          `json:"aggregate_type"`
	EventType     string          `json:"event_type"`
	EventData     json.RawMessage `json:"event_data"`
	OriginalTime  time.Time       `json:"original_time"`
	PublishedAt   time.Time       `json:"published_at"`
}

type InboxEvent struct {
	ID            uuid.UUID       `json:"id"`
	EventID       uuid.UUID       `json:"event_id"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	AggregateType string          `json:"aggregate_type"`
	EventType     string          `json:"event_type"`
	EventData     json.RawMessage `json:"event_data"`
	CreatedAt     time.Time       `json:"created_at"`
}

func main() {
	log.Println("üì• Inbox Processor –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ environment
	dbHost := getEnvOrDefault("DB_HOST", "localhost")
	dbPort := getEnvOrDefault("DB_PORT", "5433")
	dbUser := getEnvOrDefault("DB_USER", "postgres")
	dbPassword := getEnvOrDefault("DB_PASSWORD", "password")
	dbName := getEnvOrDefault("DB_NAME", "transactions")

	natsURL := getEnvOrDefault("NATS_URL", "nats://localhost:4225")
	streamName := getEnvOrDefault("STREAM_NAME", "REPLICATION")
	subject := getEnvOrDefault("SUBJECT", "replication.events")
	consumerName := getEnvOrDefault("CONSUMER_NAME", "inbox-processor")

	batchSizeStr := getEnvOrDefault("BATCH_SIZE", "10")
	batchSize, err := strconv.Atoi(batchSizeStr)
	if err != nil {
		batchSize = 10
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort, dbUser, dbPassword, dbName)

	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	if err := db.Ping(); err != nil {
		log.Fatalf("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %v", err)
	}

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Database B —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS
	nc, err := nats.Connect(natsURL,
		nats.RetryOnFailedConnect(true),
		nats.MaxReconnects(-1),
		nats.ReconnectWait(2*time.Second),
	)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %v", err)
	}
	defer nc.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS B —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (%s)", natsURL)

	// –°–æ–∑–¥–∞–µ–º JetStream –∫–æ–Ω—Ç–µ–∫—Å—Ç
	js, err := jetstream.New(nc)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JetStream: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º consumer
	consumer, err := js.CreateOrUpdateConsumer(context.Background(), streamName, jetstream.ConsumerConfig{
		Name:          consumerName,
		FilterSubject: subject,
		AckPolicy:     jetstream.AckExplicitPolicy,
		DeliverPolicy: jetstream.DeliverAllPolicy,
		MaxDeliver:    3, // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
		AckWait:       30 * time.Second,
	})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer: %v", err)
	}

	log.Printf("‚úÖ Consumer —Å–æ–∑–¥–∞–Ω: %s", consumer.CachedInfo().Name)
	log.Printf("üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: %d —Å–æ–±—ã—Ç–∏–π", batchSize)
	log.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π...")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		// –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
		messages, err := consumer.Fetch(batchSize, jetstream.FetchMaxWait(5*time.Second))
		if err != nil {
			if err == nats.ErrTimeout {
				continue // –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
			}
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
			time.Sleep(1 * time.Second)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ MessageBatch
		var msgList []jetstream.Msg
		for msg := range messages.Messages() {
			msgList = append(msgList, msg)
		}

		if len(msgList) == 0 {
			continue
		}

		log.Printf("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d", len(msgList))

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
		processMessageBatch(db, msgList)
	}
}

func processMessageBatch(db *sql.DB, messages []jetstream.Msg) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ users, –ø–æ—Ç–æ–º payments
	var userMessages []jetstream.Msg
	var paymentMessages []jetstream.Msg

	for _, msg := range messages {
		var replicationMsg ReplicationMessage
		if err := json.Unmarshal(msg.Data(), &replicationMsg); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: %v", err)
			continue
		}

		if replicationMsg.AggregateType == "user" {
			userMessages = append(userMessages, msg)
		} else if replicationMsg.AggregateType == "payment" {
			paymentMessages = append(paymentMessages, msg)
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∏
	allMessages := append(userMessages, paymentMessages...)

	for _, msg := range allMessages {
		if processMessage(db, msg) {
			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
			if err := msg.Ack(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		} else {
			// –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
			if err := msg.Nak(); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		}
	}
}

func processMessage(db *sql.DB, msg jetstream.Msg) bool {
	// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	var replicationMsg ReplicationMessage
	err := json.Unmarshal(msg.Data(), &replicationMsg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return false // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
	processed, err := isEventProcessed(db, replicationMsg.EventID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ %s: %v", replicationMsg.EventID, err)
		return false // –û—à–∏–±–∫–∞ –ë–î, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
	}

	if processed {
		log.Printf("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ %s —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", replicationMsg.EventID)
		return true // –î—É–±–ª–∏–∫–∞—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := db.Begin()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		return false
	}
	defer tx.Rollback() // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ inbox
	inboxEvent := InboxEvent{
		ID:            uuid.New(),
		EventID:       replicationMsg.EventID,
		AggregateID:   replicationMsg.AggregateID,
		AggregateType: replicationMsg.AggregateType,
		EventType:     replicationMsg.EventType,
		EventData:     replicationMsg.EventData,
		CreatedAt:     time.Now(),
	}

	err = saveToInbox(tx, inboxEvent)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ inbox %s: %v", replicationMsg.EventID, err)
		return false
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	var processResult bool
	if replicationMsg.AggregateType == "user" {
		processResult, err = processUserEvent(tx, replicationMsg.EventID, replicationMsg.EventType, replicationMsg.EventData)
	} else if replicationMsg.AggregateType == "payment" {
		processResult, err = processPaymentEvent(tx, replicationMsg.EventID, replicationMsg.EventType, replicationMsg.EventData)
	} else {
		log.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥—Ä–µ–≥–∞—Ç–∞: %s", replicationMsg.AggregateType)
		return false
	}

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è %s: %v", replicationMsg.EventID, err)
		return false
	}

	if !processResult {
		log.Printf("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ %s —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ", replicationMsg.EventID)
	}

	// –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ inbox –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
	err = markInboxProcessed(tx, []uuid.UUID{inboxEvent.ID})
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ inbox –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ %s: %v", replicationMsg.EventID, err)
		return false
	}

	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ %s: %v", replicationMsg.EventID, err)
		return false
	}

	log.Printf("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %s/%s (%s)",
		replicationMsg.AggregateType, replicationMsg.EventType, replicationMsg.EventID)

	return true
}

func isEventProcessed(db *sql.DB, eventID uuid.UUID) (bool, error) {
	query := "SELECT is_event_processed($1)"
	var processed bool
	err := db.QueryRow(query, eventID).Scan(&processed)
	return processed, err
}

func saveToInbox(tx *sql.Tx, event InboxEvent) error {
	query := `
		INSERT INTO inbox (id, event_id, aggregate_id, aggregate_type, event_type, event_data, created_at)
		VALUES ($1, $2, $3, $4, $5, $6, $7)`

	_, err := tx.Exec(query, event.ID, event.EventID, event.AggregateID,
		event.AggregateType, event.EventType, event.EventData, event.CreatedAt)
	return err
}

func processUserEvent(tx *sql.Tx, eventID uuid.UUID, eventType string, eventData json.RawMessage) (bool, error) {
	query := "SELECT process_user_event($1, $2, $3)"
	var processed bool
	err := tx.QueryRow(query, eventID, eventType, eventData).Scan(&processed)
	return processed, err
}

func processPaymentEvent(tx *sql.Tx, eventID uuid.UUID, eventType string, eventData json.RawMessage) (bool, error) {
	query := "SELECT process_payment_event($1, $2, $3)"
	var processed bool
	err := tx.QueryRow(query, eventID, eventType, eventData).Scan(&processed)
	return processed, err
}

func markInboxProcessed(tx *sql.Tx, eventIDs []uuid.UUID) error {
	if len(eventIDs) == 0 {
		return nil
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π UPDATE –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞
	query := `
		UPDATE inbox 
		SET processed = true, processed_at = NOW()
		WHERE id = $1 AND processed = false`

	for _, id := range eventIDs {
		_, err := tx.Exec(query, id)
		if err != nil {
			return err
		}
	}

	return nil
}

func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
