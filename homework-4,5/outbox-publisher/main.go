package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/nats-io/nats.go"
	"github.com/nats-io/nats.go/jetstream"
	_ "github.com/lib/pq"
)

type OutboxEvent struct {
	ID            uuid.UUID       `json:"id"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	AggregateType string          `json:"aggregate_type"`
	EventType     string          `json:"event_type"`
	EventData     json.RawMessage `json:"event_data"`
	CreatedAt     time.Time       `json:"created_at"`
}

type ReplicationMessage struct {
	EventID       uuid.UUID       `json:"event_id"`
	AggregateID   uuid.UUID       `json:"aggregate_id"`
	AggregateType string          `json:"aggregate_type"`
	EventType     string          `json:"event_type"`
	EventData     json.RawMessage `json:"event_data"`
	OriginalTime  time.Time       `json:"original_time"`
	PublishedAt   time.Time       `json:"published_at"`
}

func main() {
	log.Println("üì§ Outbox Publisher –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ environment
	dbHost := getEnvOrDefault("DB_HOST", "localhost")
	dbPort := getEnvOrDefault("DB_PORT", "5432")
	dbUser := getEnvOrDefault("DB_USER", "postgres")
	dbPassword := getEnvOrDefault("DB_PASSWORD", "password")
	dbName := getEnvOrDefault("DB_NAME", "transactions")

	natsURL := getEnvOrDefault("NATS_URL", "nats://localhost:4222")
	streamName := getEnvOrDefault("STREAM_NAME", "REPLICATION")
	subject := getEnvOrDefault("SUBJECT", "replication.events")

	pollIntervalStr := getEnvOrDefault("POLL_INTERVAL", "1")
	pollInterval, err := strconv.Atoi(pollIntervalStr)
	if err != nil {
		pollInterval = 1
	}

	batchSizeStr := getEnvOrDefault("BATCH_SIZE", "10")
	batchSize, err := strconv.Atoi(batchSizeStr)
	if err != nil {
		batchSize = 10
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort, dbUser, dbPassword, dbName)

	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	if err := db.Ping(); err != nil {
		log.Fatalf("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %v", err)
	}

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Database A —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS
	nc, err := nats.Connect(natsURL,
		nats.RetryOnFailedConnect(true),
		nats.MaxReconnects(-1),
		nats.ReconnectWait(2*time.Second),
	)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS: %v", err)
	}
	defer nc.Close()

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS A —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (%s)", natsURL)

	// –°–æ–∑–¥–∞–µ–º JetStream –∫–æ–Ω—Ç–µ–∫—Å—Ç
	js, err := jetstream.New(nc)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JetStream: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º stream
	stream, err := js.CreateOrUpdateStream(context.Background(), jetstream.StreamConfig{
		Name:        streamName,
		Subjects:    []string{subject},
		Storage:     jetstream.FileStorage,
		Retention:   jetstream.LimitsPolicy,
		MaxAge:      24 * time.Hour, // –•—Ä–∞–Ω–∏–º —Å–æ–±—ã—Ç–∏—è 24 —á–∞—Å–∞
		MaxMsgs:     100000,         // –ú–∞–∫—Å–∏–º—É–º 100k —Å–æ–æ–±—â–µ–Ω–∏–π
		Duplicates:  5 * time.Minute, // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ 5 –º–∏–Ω—É—Ç
	})
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è stream: %v", err)
	}

	log.Printf("‚úÖ JetStream —Å–æ–∑–¥–∞–Ω: %s", stream.CachedInfo().Config.Name)
	log.Printf("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: %d —Å–µ–∫—É–Ω–¥", pollInterval)
	log.Printf("üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: %d —Å–æ–±—ã—Ç–∏–π", batchSize)
	log.Println("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É outbox...")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ outbox
	ticker := time.NewTicker(time.Duration(pollInterval) * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			processOutboxBatch(db, js, subject, batchSize)
		}
	}
}

func processOutboxBatch(db *sql.DB, js jetstream.JetStream, subject string, batchSize int) {
	// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ outbox
	events, err := getUnprocessedEvents(db, batchSize)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è outbox: %v", err)
		return
	}

	if len(events) == 0 {
		return // –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
	}

	log.Printf("üì• –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %d", len(events))

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
	var processedIDs []uuid.UUID

	for _, event := range events {
		message := ReplicationMessage{
			EventID:       event.ID,
			AggregateID:   event.AggregateID,
			AggregateType: event.AggregateType,
			EventType:     event.EventType,
			EventData:     event.EventData,
			OriginalTime:  event.CreatedAt,
			PublishedAt:   time.Now(),
		}

		messageBytes, err := json.Marshal(message)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è %s: %v", event.ID, err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ NATS —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
		_, err = js.Publish(context.Background(), subject, messageBytes,
			jetstream.WithMsgID(event.ID.String()),
		)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è %s –≤ NATS: %v", event.ID, err)
			continue
		}

		processedIDs = append(processedIDs, event.ID)
		log.Printf("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s/%s (%s)", 
			event.AggregateType, event.EventType, event.ID)
	}

	// –û—Ç–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
	if len(processedIDs) > 0 {
		err = markEventsProcessed(db, processedIDs)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: %v", err)
		} else {
			log.Printf("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: %d —Å–æ–±—ã—Ç–∏–π", len(processedIDs))
		}
	}
}

func getUnprocessedEvents(db *sql.DB, limit int) ([]OutboxEvent, error) {
	query := `
		SELECT id, aggregate_id, aggregate_type, event_type, event_data, created_at
		FROM outbox 
		WHERE processed = false 
		ORDER BY created_at ASC 
		LIMIT $1`

	rows, err := db.Query(query, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var events []OutboxEvent

	for rows.Next() {
		var event OutboxEvent
		err := rows.Scan(
			&event.ID,
			&event.AggregateID,
			&event.AggregateType,
			&event.EventType,
			&event.EventData,
			&event.CreatedAt,
		)
		if err != nil {
			return nil, err
		}

		events = append(events, event)
	}

	return events, rows.Err()
}

func markEventsProcessed(db *sql.DB, eventIDs []uuid.UUID) error {
	if len(eventIDs) == 0 {
		return nil
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
	query := `
		UPDATE outbox 
		SET processed = true, processed_at = NOW()
		WHERE id = $1 AND processed = false`

	for _, id := range eventIDs {
		_, err := db.Exec(query, id)
		if err != nil {
			return err
		}
	}
	
	return nil
}

func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
} 