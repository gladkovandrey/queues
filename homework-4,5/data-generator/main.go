package main

import (
	"database/sql"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"

	"github.com/google/uuid"
	_ "github.com/lib/pq"
)

type User struct {
	ID    uuid.UUID
	Name  string
	Email string
}

type Payment struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Amount      float64
	Currency    string
	Description string
	Status      string
}

var (
	firstNames = []string{
		"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ú–∞—Ä–∏—è", "–î–º–∏—Ç—Ä–∏–π", "–ï–ª–µ–Ω–∞", "–°–µ—Ä–≥–µ–π", "–û–ª—å–≥–∞", "–ê–Ω–¥—Ä–µ–π", "–ù–∞—Ç–∞–ª—å—è",
		"–ú–∞–∫—Å–∏–º", "–ê–Ω–Ω–∞", "–ò–≥–æ—Ä—å", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ê–ª–µ–∫—Å–µ–π", "–¢–∞—Ç—å—è–Ω–∞", "–í–ª–∞–¥–∏–º–∏—Ä", "–ò—Ä–∏–Ω–∞",
	}

	lastNames = []string{
		"–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–ö–æ–∑–ª–æ–≤", "–°–æ–∫–æ–ª–æ–≤", "–ü–æ–ø–æ–≤", "–ù–æ–≤–∏–∫–æ–≤", "–ú–æ—Ä–æ–∑–æ–≤",
		"–í–æ–ª–∫–æ–≤", "–ó–∞–π—Ü–µ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–§–µ–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–ù–∏–∫–æ–ª–∞–µ–≤", "–†–æ–º–∞–Ω–æ–≤",
	}

	domains = []string{
		"example.com", "test.org", "demo.net", "sample.io", "email.ru",
	}

	paymentDescriptions = []string{
		"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ",
		"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –¥–æ—Å—Ç–∞–≤–∫–∏",
		"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
		"–û–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥",
		"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å",
		"–ü–µ—Ä–µ–≤–æ–¥ –¥—Ä—É–≥—É",
		"–û–ø–ª–∞—Ç–∞ —Ç–∞–∫—Å–∏",
		"–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ –∫–∏–Ω–æ",
		"–ó–∞–∫–∞–∑ –µ–¥—ã",
		"–û–ø–ª–∞—Ç–∞ –ø–∞—Ä–∫–æ–≤–∫–∏",
	}
)

func main() {
	log.Println("üöÄ Data Generator –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ environment
	dbHost := getEnvOrDefault("DB_HOST", "localhost")
	dbPort := getEnvOrDefault("DB_PORT", "5432")
	dbUser := getEnvOrDefault("DB_USER", "postgres")
	dbPassword := getEnvOrDefault("DB_PASSWORD", "password")
	dbName := getEnvOrDefault("DB_NAME", "transactions")

	intervalStr := getEnvOrDefault("GENERATION_INTERVAL", "1")
	interval, err := strconv.Atoi(intervalStr)
	if err != nil {
		interval = 1
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		dbHost, dbPort, dbUser, dbPassword, dbName)

	db, err := sql.Open("postgres", dsn)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatalf("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %v", err)
	}

	log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Database A —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	log.Printf("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %d —Å–µ–∫—É–Ω–¥", interval)
	log.Println("üìä –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users := createInitialUsers(db, 5)
	log.Printf("üë• –°–æ–∑–¥–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", len(users))

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	ticker := time.NewTicker(time.Duration(interval) * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			// 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			// 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ–≥–æ)
			if rand.Float32() < 0.7 && len(users) > 0 {
				// –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				user := users[rand.Intn(len(users))]
				payment := generatePayment(user.ID)
				if createPayment(db, payment) {
					log.Printf("üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: %.2f %s –¥–ª—è %s",
						payment.Amount, payment.Currency, user.Name)
				}
			} else {
				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–µ–≥–æ
				user := generateUser()
				if createUser(db, user) {
					users = append(users, user)
					log.Printf("üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s (%s)", user.Name, user.Email)

					// –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					payment := generatePayment(user.ID)
					if createPayment(db, payment) {
						log.Printf("üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: %.2f %s –¥–ª—è %s",
							payment.Amount, payment.Currency, user.Name)
					}
				}
			}
		}
	}
}

func createInitialUsers(db *sql.DB, count int) []User {
	var users []User

	for i := 0; i < count; i++ {
		user := generateUser()
		if createUser(db, user) {
			users = append(users, user)
		}
	}

	return users
}

func generateUser() User {
	firstName := firstNames[rand.Intn(len(firstNames))]
	lastName := lastNames[rand.Intn(len(lastNames))]
	domain := domains[rand.Intn(len(domains))]

	return User{
		ID:   uuid.New(),
		Name: firstName + " " + lastName,
		Email: fmt.Sprintf("%s.%s@%s",
			transliterate(firstName), transliterate(lastName), domain),
	}
}

func generatePayment(userID uuid.UUID) Payment {
	amounts := []float64{50.0, 100.0, 250.0, 500.0, 1000.0, 1500.0, 2500.0}
	currencies := []string{"USD", "EUR", "RUB"}
	statuses := []string{"pending", "completed", "failed"}

	return Payment{
		ID:          uuid.New(),
		UserID:      userID,
		Amount:      amounts[rand.Intn(len(amounts))],
		Currency:    currencies[rand.Intn(len(currencies))],
		Description: paymentDescriptions[rand.Intn(len(paymentDescriptions))],
		Status:      statuses[rand.Intn(len(statuses))],
	}
}

func createUser(db *sql.DB, user User) bool {
	query := `
		INSERT INTO users (id, name, email) 
		VALUES ($1, $2, $3)`

	_, err := db.Exec(query, user.ID, user.Name, user.Email)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return false
	}

	return true
}

func createPayment(db *sql.DB, payment Payment) bool {
	query := `
		INSERT INTO payments (id, user_id, amount, currency, description, status) 
		VALUES ($1, $2, $3, $4, $5, $6)`

	_, err := db.Exec(query, payment.ID, payment.UserID, payment.Amount,
		payment.Currency, payment.Description, payment.Status)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		return false
	}

	return true
}

func transliterate(text string) string {
	// –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è email –∞–¥—Ä–µ—Å–æ–≤ (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã)
	translitMap := map[rune]string{
		// –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
		'–ê': "a", '–ë': "b", '–í': "v", '–ì': "g", '–î': "d", '–ï': "e", '–ñ': "zh",
		'–ó': "z", '–ò': "i", '–ô': "y", '–ö': "k", '–õ': "l", '–ú': "m", '–ù': "n",
		'–û': "o", '–ü': "p", '–†': "r", '–°': "s", '–¢': "t", '–£': "u", '–§': "f",
		'–•': "h", '–¶': "ts", '–ß': "ch", '–®': "sh", '–©': "sch", '–´': "y", '–≠': "e",
		'–Æ': "yu", '–Ø': "ya", '–¨': "", '–™': "",
		// –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
		'–∞': "a", '–±': "b", '–≤': "v", '–≥': "g", '–¥': "d", '–µ': "e", '–∂': "zh",
		'–∑': "z", '–∏': "i", '–π': "y", '–∫': "k", '–ª': "l", '–º': "m", '–Ω': "n",
		'–æ': "o", '–ø': "p", '—Ä': "r", '—Å': "s", '—Ç': "t", '—É': "u", '—Ñ': "f",
		'—Ö': "h", '—Ü': "ts", '—á': "ch", '—à': "sh", '—â': "sch", '—ã': "y", '—ç': "e",
		'—é': "yu", '—è': "ya", '—å': "", '—ä': "",
	}

	result := ""
	for _, char := range text {
		if latin, exists := translitMap[char]; exists {
			result += latin
		} else {
			result += string(char)
		}
	}

	return result
}

func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
